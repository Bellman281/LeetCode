class Solution {
public:
	#define MOD 1000000007
	int uniqueLetterString(string s) 
	{
		pair<int, int> last_pos[26];
		for (int i = 0; i < 26; ++i)
		{
			last_pos[i].first = last_pos[i].second = -1;
		}

		long long ret = 0, last_calc = 0;
		int len = s.length();
		for (int i = 0; i < len; ++i)
		{
			int j = s[i] - 'A', offset = 0;
			pair<int, int>& pos = last_pos[j];
			if (pos.first == -1 && pos.second == -1) // letter s[i] first occur, such as AB, now C
			{
				offset = i + 1;
			}
			else
			{
				if (pos.first == -1) // letter s[i] occur once, such as ABC, now A
				{
					offset = i - pos.second - (pos.second + 1);
				}
				else // letter s[i] occur more then once, such as ABCAC now A .only calculate until we reach the prev prev s[i]
				{
					offset = i - pos.second - (pos.second - pos.first);
				}
				pos.first = pos.second;
			}
			last_calc = (last_calc + offset) % MOD;
			ret = (ret + last_calc) % MOD;
			pos.second = i;
		}
		return ret;
	}
};