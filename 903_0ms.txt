class Solution {
public:
    int numPermsDISequence(string S) {
        
	int max = S.size();
        if(max == 1)
            return 1;
	vector<long long> last(max + 1); // last[i] means when the end is i, the number of available
	if (S.at(0) == 'D') {
		last[0] = 1;  
	} else {
		last[1] = 1;
	}
	
	for (int i = 1; i < max; i++) { //i+1 means the len of array
		if (S.at(i) == 'D') {
			last[i+1] = 0;
			for (int j = i; j >= 0; j--) {
				last[j] = (last[j+1] + last[j]) % 1000000007; // last(i, j) = last(i-1, j) + last(i, j+1) ; 
			}
		} else {
			long long temp = last[0];
			last[0] = 0;
			for (int j = 1; j <= i + 1; j++) {
				long long x = last[j];
				last[j] = (temp + last[j - 1]) % 1000000007; //last(i, j) = last(i - 1, j - 1) + last(i, j - 1);
				temp = x;
			}
		}
	}
	long long ans = 0;
	for (long long x : last)
		ans += x;
	return ans % 1000000007;
}
};